# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main

resources:
  repositories:
  - repository: self
    type: git

variables:
  - name: MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  - name: DOCKER_REPOSITORY
    value: $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(DOCKER_REPOSITORY_NAME)

jobs:
- job: Job_1
  displayName: Setup_Maven
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
  - task: Cache@2
    displayName: Cache Maven local repo
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: $(MAVEN_CACHE_FOLDER)
  - task: Maven@3
    displayName: Maven install
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
      goals: 'install'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      mavenVersionOption: 'Default'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: false
  - task: ArchiveFiles@2
    displayName: Archive test results
    inputs:
      rootFolderOrFile: '**/surefire-reports/TEST-*.xml'
      includeRootFolder: false
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Test-Results'
    inputs:
      ArtifactName: Test-Results
  - task: ArchiveFiles@2
    displayName: Archive target folder
    inputs:
      rootFolderOrFile: target/bewizor-api.jar
      includeRootFolder: false
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Bewizor-Api'
    inputs:
      ArtifactName: Bewizor-Api

- job: Job_2
  displayName: Setup_DockerImage
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
  - script: |
      aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
    displayName: 'Login to AWS'
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  - task: Docker@2
    displayName: Build an image
    inputs:
      repository: $(DOCKER_REPOSITORY)
      command: buildAndPush
      Dockerfile: api/Dockerfile
      tags: |
        latest
        '$(Build.BuildId)'
